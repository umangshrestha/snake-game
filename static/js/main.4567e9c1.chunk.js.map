{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["getRandom","x","Math","floor","random","y","emptyRows","Array","map","_","initialState","rows","snake","food","direction","speed","App","moveSnake","snakeCopy","state","head","length","push","shift","setState","update","isCollapsed","i","alert","changeDirection","keyCode","setInterval","this","document","onkeydown","title","isEaten","newRows","forEach","element","displayRows","row","value","j","name","className","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4567e9c1.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport \"./App.css\"\n\n\nconst  HEIGHT = 10;\nconst  WIDTH  = 10;\n\n// mapping keycode  for changing direction\nconst LEFT  = 37; \nconst UP    = 38;\nconst RIGHT = 39; \nconst DOWN  = 40;\nconst STOP  = 32; /* [space] used for pause */\n\n\nconst getRandom = () => {\n    return  { \n        x: Math.floor(Math.random() *WIDTH),\n        y: Math.floor(Math.random() *HEIGHT) \n    }\n}\n\n\nconst emptyRows = () => [...Array(WIDTH)].map((_) => [...Array(HEIGHT)].map((_)=> 'grid-item'));\n\n\nconst increaseSpeed = (speed) => speed - 10 *(speed > 10)\n\n\nconst initialState = {\n    rows: emptyRows(),\n    snake: [getRandom()],\n    food: getRandom(),\n    direction: STOP,\n    speed: 100,\n}\n\nclass App extends Component {\n\n    constructor() {\n        super();\n        this.state = initialState;\n    }\n\n    componentDidMount() {\n        setInterval(this.moveSnake, this.state.speed);\n        document.onkeydown = this.changeDirection;\n        document.title = \"snake-game\";\n    }\n\n    componentDidUpdate() {\n        this.isCollapsed();\n        this.isEaten();\n    }\n\n    moveSnake = () => {\n        let snakeCopy = [...this.state.snake];\n        let head  =  {...snakeCopy[snakeCopy.length-1]};\n        switch (this.state.direction) {\n            case LEFT:  head.y += -1; break;    \n            case UP:    head.x += -1; break;\n            case RIGHT: head.y += 1;  break;\n            case DOWN:  head.x += 1;  break;\n            default: return;\n        }\n        /* keep the value within range of 0 to HEIGHT */\n        head.x += HEIGHT * ((head.x<0)-(head.x>=HEIGHT));\n        head.y += WIDTH * ((head.y<0)-(head.y>=WIDTH));\n        \n        snakeCopy.push(head); \n        snakeCopy.shift()\n        this.setState({\n            snake: snakeCopy,\n            head: head\n        });\n        this.update(); \n    }   \n    \n    isEaten() {\n        let snakeCopy  = [...this.state.snake];\n        let head  =  {...snakeCopy[snakeCopy.length-1]};\n        let food = this.state.food;\n        if ((head.x === food.x) &&(head.y === food.y)) {\n            snakeCopy.push(head);\n            this.setState({\n                snake: snakeCopy,\n                food: getRandom(),\n                speed: increaseSpeed(this.state.speed) \n            });\n        } \n    }\n\n    update() {\n        let newRows = emptyRows(); \n        this.state.snake.forEach(element => newRows[element.x][element.y] = 'snake')\n        newRows[this.state.food.x][this.state.food.y] = 'food';\n        this.setState({rows: newRows});\n    }\n\n    isCollapsed = () => {\n        let snake = this.state.snake;\n        let head  = {...snake[snake.length-1]} \n        for (let i=0; i<snake.length-3; i++) {\n            if ((head.x === snake[i].x) &&(head.y === snake[i].y)) {\n                this.setState(initialState);\n                alert(`game over: ${snake.length*10}`)\n            }\n        }\n    }\n\n    changeDirection = ({keyCode}) => { \n        let direction = this.state.direction;\n        switch (keyCode) {\n            case LEFT:\n                direction = (direction === RIGHT)? RIGHT: LEFT;\n                break;\n            case RIGHT:\n                direction = (direction === LEFT)? LEFT: RIGHT;\n                break;\n            case UP:\n                direction = (direction === DOWN)? DOWN: UP;\n                break;\n            case DOWN:\n                direction = (direction === UP)? UP: DOWN;\n                break;\n            case STOP:\n                direction = STOP;\n                break;\n            default:\n                break;\n        }\n        this.setState({\n            direction: direction\n        });\n    }    \n\n   \n    render() {\n        const displayRows = this.state.rows.map((row, i) => row.map((value, j) =>  <div name={`${i}=${j}`} className={value} />))\n        return (\n            <div className=\"a\">\n                <h1> Snake  v0.1.1</h1>\n                <ul>\n                    <li>press \"space\" to pause the game.</li>\n                    <li>press \"arrow keys\" to change direction/ unpause.</li>\n                </ul>\n                <div className=\"snake-container\">\n                    <div className=\"grid\">{displayRows}</div>\n                </div>\n            </div>\n        )    \n    }\n}\n\n\n\n\n\n\n\n\n\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}